1. Installing postgresql in linux

  sudo apt install postgresql
  
  Starting postgres -----
  
viren@viren-SVE1511AENB:~$ sudo su postgres
postgres@viren-SVE1511AENB:/home/viren$ psql
psql (12.7 (Ubuntu 12.7-0ubuntu0.20.04.1))
Type "help" for help.

postgres=# 

  
  
2. Data types  :

Name	                      Storage Size               	           Description	                                           Range

smallint	                   2 bytes	                            small-range integer	                                -32768 to +32767

integer                    	4 bytes                              	typical choice for integer	                     -2147483648 to +2147483647

bigint	                    8 bytes	                               large-range integer	                      -9223372036854775808 to 9223372036854775807

decimal	                    variable                            	user-specified precision,exact	            up to 131072 digits before the decimal point;
                                                                                                              up to 16383 digits after the decimal point
                                                                                                              
numeric                   	variable	                            user-specified precision,exact	            up to 131072 digits before the decimal point;
                                                                                                              up to 16383 digits after the decimal point
                                                                                                              
real	                     4 bytes	                              variable-precision,inexact	                    6 decimal digits precision

double precision	         8 bytes	                              variable-precision,inexact	                    15 decimal digits precision

smallserial              	 2 bytes	                              small autoincrementing integer	                        1 to 32767

serial                     4 bytes                                	autoincrementing integer	                             1 to 2147483647

bigserial	                 8 bytes	                                large autoincrementing integer	                  1 to 9223372036854775807


3. to show all the list of databases in the postgresql

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
-----------+----------+----------+---------+-------+-----------------------
 postgres  | postgres | UTF8     | en_IN   | en_IN | 
 template0 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
(3 rows)

4. create database using 

postgres=# CREATE DATABASE admin;
CREATE DATABASE

5. to delete a databases using

postgres=# DROP DATABASE admin;
DROP DATABASE

6. for creating a table

postgres=# CREATE TABLE data (id integer, password varchar(25));
CREATE TABLE

for display table data 

postgres=# SELECT * from data;
 id | password 
----+----------
(0 rows)

7. insert data into table

postgres=# insert into data values(1,' virender');
INSERT 0 1

postgres=# SELECT * from data;
 id | password  
----+-----------
  1 |  virender
(1 row)

insert multiple data into table

postgres=# insert into data values(1,' virender'),(2,'sameer'),(3,'rizwan');
INSERT 0 3
postgres=# SELECT * from data;
 id | password  
----+-----------
  1 |  virender
  2 | sameer
  3 | rizwan
(4 rows)


8. modify the table 

postgres=# ALTER TABLE data ALTER  password type char(25);
ALTER TABLE

now password datatype change into varchar to char

9. for describe table 

postgres=# \d
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | data | table | postgres
(1 row)

postgres=# \d+
                      List of relations
 Schema | Name | Type  |  Owner   |    Size    | Description 
--------+------+-------+----------+------------+-------------
 public | data | table | postgres | 8192 bytes | 
(1 row)

10. how to alter column name 

postgres=# ALTER TABLE data RENAME password to name;
\ALTER TABLE

postgres=# SELECT * from data;
 id |           name            
----+---------------------------
  1 |  virender                
  1 |  virender                
  2 | sameer                   
  3 | rizwan                   
(4 rows)

11. delete rows from table

postgres=# DELETE from data WHERE id=1;
DELETE 2

postgres=# select * from data;
 id |           name            
----+---------------------------
  2 | sameer                   
  3 | rizwan                   
(2 rows)


12. creating the schema of table

schema is the collection of tables .

postgres=# CREATE SCHEMA unknown;
\CREATE SCHEMA
postgres=# CREATE TABLE unknown.info (id integer, name varchar(25), address  varchar(50), mobile bigint);

postgres=# insert into unknown.info values(1,'virender','dabua colony faridabad',9654058335);
INSERT 0 1
postgres=# select * from unknown.info;
 id |   name   |        address         |   mobile   
----+----------+------------------------+------------ 
  1 | virender | dabua colony faridabad | 9654058335
(1 rows)


13. (A) PRIMARY KEY - A primary key is a column or a group of columns used to identify a row uniquely in a table.

    (B) FORIEGN KEY - A foreign key is a column or a group of columns in a table that reference the primary key of another table. It is used for joining two tables. 

    (C) UNIQUE KEY - UNIQUE constraint ensures that the uniqueness of the values entered into a column or a field of a table. 
    
    (D) NOT NULL - NOT NULL constraint for a column to enforce a column not accept NULL .
    
    
    postgres=# CREATE TABLE imp (no integer NOT NULL PRIMARY KEY , name varchar(25) NOT NULL, address varchar(50) NOT NULL, qualification varchar (25) NOT NULL);
    
    CREATE TABLE

    postgres=# \d imp;
                           Table "public.imp"
    
    Column     |         Type          | Collation | Nullable | Default 
---------------+-----------------------+-----------+----------+---------
 no            | integer               |           | not null | 
 name          | character varying(25) |           | not null | 
 address       | character varying(50) |           | not null | 
 qualification | character varying(25) |           | not null | 
Indexes:
    "imp_pkey" PRIMARY KEY, btree (no)

    
14. Subquery and nested queries  

Subquery means query under query

postgres=# SELECT name FROM imp WHERE address ='dabua colony';
   name   
----------
 virender
(1 row)

15. MIN finding the minimum data , MAX finding the maximum data,  AVG finding the average data 

postgres=# insert into cars values(1,'Ferarri', 2500000),(2,'lamborghini', 2900000),(3,'swift dezire', 500000), (4,'hundayi i20', 700000), (5,'creata', 2500000);
INSERT 0 5

postgres=# SELECT * from cars;
 id |     name     |  price  
----+--------------+---------
  1 | Ferarri      | 2500000
  2 | lamborghini  | 2900000
  3 | swift dezire | 500000
  4 | hundayi i20  | 700000
  5 | creata       | 2500000
(5 rows)

postgres=# SELECT  MAX(price) from cars;
  max   
--------
 700000
(1 row)

postgres=# SELECT  MIN(price) from cars;
   min   
---------
 2500000
(1 row)

postgres=# SELECT  AVG(price) from cars;
   avg   
---------
 1820000
(1 row)

16. Order by Ascending & Descending 

The ORDER BY keyword is used to sort the result-set in ascending or descending order.

postgres=# SELECT * from mobile;
 id |   name   | price 
----+----------+-------
  1 | Xiamomi  | 10000
  2 | Apple    | 60000
  3 | samsung  | 30000
  4 | Motorola | 20000
  5 | Nokia    |  5000
(5 rows)

postgres=# SELECT * from mobile ORDER BY price ASC;
 id |   name   | price 
----+----------+-------
  5 | Nokia    |  5000
  1 | Xiamomi  | 10000
  4 | Motorola | 20000
  3 | samsung  | 30000
  2 | Apple    | 60000
(5 rows)

postgres=# SELECT * from mobile ORDER BY price DESC;
 id |   name   | price 
----+----------+-------
  2 | Apple    | 60000
  3 | samsung  | 30000
  4 | Motorola | 20000
  1 | Xiamomi  | 10000
  5 | Nokia    |  5000
(5 rows)

17. group by clause 

GROUP BY clause is used in collaboration with the SELECT statement to group together those rows in a table that have identical data. 

postgres=# SELECT * from college;
 id |   name   | course 
----+----------+--------
  1 | virender | BTech
  2 | rizwan   | BTech
  3 | sid      | Bcom
  4 | tarun    | BCA
  5 | raman    | BBA
  6 | mayank   | Bsc
  7 | Rahul    | BHM
  8 | rahul    | Mtech
(8 rows)



postgres=# SELECT course, count(*) from college GROUP BY course;
 course | count 
--------+-------
 BBA    |     1
 BCA    |     1
 Bcom   |     1
 BHM    |     1
 Bsc    |     1
 Mtech  |     1
 BTech  |     2
(7 rows)

18. JOINS  -Joins clause is used to combine records from two or more tables in a database. A JOIN is a means for combining fields from two tables by using values common to each.

 
 postgres=# Select * from orders;
 order_id | customer_id | order_data | shipper_id 
----------+-------------+------------+------------
     1038 |           2 | 1996-09-19 |          3
     1039 |           4 | 1996-09-20 |          1
(2 rows)

 postgres=# Select * from customers;

customer_id | customer_name | contact_name |      address       |   city    | postal_code | country 
-------------+---------------+--------------+--------------------+-----------+-------------+---------
           2 | amazon        | virender     | D944 dabua colony  | faridabad |      121001 | india
           4 | flipkart      | rijwan       | sgm nagar sec48    | faridabad |      121001 | india
(2 rows)


1. INNER JOIN - The INNER JOIN keyword selects records that have matching values in both tables.


postgres=# Select orders.order_id, customers.customer_name from orders INNER JOIN customers ON orders.customer_id = customers.customer_id;
 order_id | customer_name 
----------+---------------
     1038 | amazon
     1039 | flipkart
(2 rows)

2. LEFT JOIN - The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 

postgres=# Select  customers.customer_name, orders.order_id from orders LEFT JOIN customers ON orders.customer_id = customers.customer_id ORDER BY customers.customer_name;

3. RIGHT JOIN - The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). 

postgres=# Select  customers.customer_name, orders.order_id from orders RIGHT JOIN customers ON orders.customer_id = customers.customer_id ORDER BY customers.customer_name;

4. FULL JOIN - The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

postgres=# Select  customers.customer_name, orders.order_id from orders FULL OUTER JOIN customers ON orders.customer_id = customers.customer_id ORDER BY customers.customer_name;


19. WHERE clause is used to filter data .

postgres=# select * from customers WHERE country ='india';

customer_id | customer_name | contact_name |      address       |   city    | postal_code | country 
-------------+---------------+--------------+--------------------+-----------+-------------+---------
           2 | amazon        | virender     | D944 dabua colony  | faridabad |      121001 | india
           4 | flipkart      | rijwan       | sgm nagar sec48    | faridabad |      121001 | india
(2 rows)


20.The DISTINCT statement is used to return only distinct (different) values.

postgres=# select country from customers ;

 country 
---------
 india
 india

(2 rows)

remove duplicacy

postgres=# select DISTINCT country from customers;

 country 
---------
 india


(1 rows)

